Grammar

    0 $accept: program $end

    1 program: exp

    2 exps: /* empty */
    3     | exp
    4     | exps SEMICOLON exp
    5     | exps COMMA exp

    6 exp: lValue
    7    | NIL
    8    | INTLIT
    9    | STRLIT
   10    | seqExp
   11    | negation
   12    | callExp
   13    | infixExp
   14    | arrCreate
   15    | recCreate
   16    | assignment
   17    | ifThenElse
   18    | ifThen
   19    | whileExp
   20    | forExp
   21    | BREAK
   22    | letExp

   23 decs: dec
   24     | decs dec

   25 dec: tyDec
   26    | varDec
   27    | funDec

   28 tyDec: TYPE ID EQUALS ty

   29 ty: ID
   30   | arrTy
   31   | recTy

   32 arrTy: ARRAY OF ID

   33 recTy: LBRACE fieldDecs RBRACE

   34 fieldDecs: /* empty */
   35          | fieldDecs fieldDec
   36          | fieldDecs COMMA fieldDec

   37 fieldDec: ID COLON ID

   38 funDec: FUNCTION ID LPAREN fieldDecs RPAREN COLON ID EQUALS exp

   39 varDec: VAR ID COLON ID ASSIGNMENT exp

   40 lValue: ID
   41       | lValue PERIOD ID
   42       | lValue LBRACK exp RBRACK
   43       | ID LBRACK exp RBRACK

   44 seqExp: LPAREN exps RPAREN

   45 negation: SUBTRACT exp

   46 callExp: ID LPAREN exps RPAREN

   47 infixExp: exp AND exp
   48         | exp OR exp
   49         | exp EQUALS exp
   50         | exp LESSGREATER exp
   51         | exp GREATER exp
   52         | exp LESS exp
   53         | exp GEQUAL exp
   54         | exp LEQUAL exp
   55         | exp ADD exp
   56         | exp SUBTRACT exp
   57         | exp MULTIPLY exp
   58         | exp DIVIDE exp

   59 arrCreate: ID LBRACK exp RBRACK OF exp

   60 recCreate: ID LBRACE fieldCreates RBRACE

   61 fieldCreates: /* empty */
   62             | fieldCreates fieldCreate
   63             | fieldCreates COMMA fieldCreate

   64 fieldCreate: ID EQUALS exp

   65 assignment: lValue ASSIGNMENT exp

   66 ifThenElse: IF exp THEN exp ELSE exp

   67 ifThen: IF exp THEN exp

   68 whileExp: WHILE exp DO exp

   69 forExp: FOR ID ASSIGNMENT exp TO exp DO exp

   70 letExp: LET decs IN exps END


Terminals, with rules where they appear

$end (0) 0
error (256)
INTLIT (258) 8
STRLIT (259) 9
RBRACK (260) 42 43 59
LBRACE (261) 33 60
RBRACE (262) 33 60
COLON (263) 37 38 39
PERIOD (264) 41
COMMA (265) 5 36 63
SEMICOLON (266) 4
RPAREN (267) 38 44 46
ARRAY (268) 32
BREAK (269) 21
ELSE (270) 66
END (271) 70
FOR (272) 69
IF (273) 66 67
IN (274) 70
LET (275) 70
NIL (276) 7
THEN (277) 66 67
TO (278) 69
VAR (279) 39
WHILE (280) 68
FUNCTION (281) 38
TYPE (282) 28
ID (283) 28 29 32 37 38 39 40 41 43 46 59 60 64 69
LBRACK (284) 42 43 59
LPAREN (285) 38 44 46
DO (286) 68 69
OF (287) 32 59
ASSIGNMENT (288) 39 65 69
AND (289) 47
OR (290) 48
LEQUAL (291) 54
GEQUAL (292) 53
LESS (293) 52
GREATER (294) 51
LESSGREATER (295) 50
EQUALS (296) 28 38 49 64
ADD (297) 55
SUBTRACT (298) 45 56
MULTIPLY (299) 57
DIVIDE (300) 58
UNARY (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
exps (49)
    on left: 2 3 4 5, on right: 4 5 44 46 70
exp (50)
    on left: 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22, on right:
    1 3 4 5 38 39 42 43 45 47 48 49 50 51 52 53 54 55 56 57 58 59 64
    65 66 67 68 69
decs (51)
    on left: 23 24, on right: 24 70
dec (52)
    on left: 25 26 27, on right: 23 24
tyDec (53)
    on left: 28, on right: 25
ty (54)
    on left: 29 30 31, on right: 28
arrTy (55)
    on left: 32, on right: 30
recTy (56)
    on left: 33, on right: 31
fieldDecs (57)
    on left: 34 35 36, on right: 33 35 36 38
fieldDec (58)
    on left: 37, on right: 35 36
funDec (59)
    on left: 38, on right: 27
varDec (60)
    on left: 39, on right: 26
lValue (61)
    on left: 40 41 42 43, on right: 6 41 42 65
seqExp (62)
    on left: 44, on right: 10
negation (63)
    on left: 45, on right: 11
callExp (64)
    on left: 46, on right: 12
infixExp (65)
    on left: 47 48 49 50 51 52 53 54 55 56 57 58, on right: 13
arrCreate (66)
    on left: 59, on right: 14
recCreate (67)
    on left: 60, on right: 15
fieldCreates (68)
    on left: 61 62 63, on right: 60 62 63
fieldCreate (69)
    on left: 64, on right: 62 63
assignment (70)
    on left: 65, on right: 16
ifThenElse (71)
    on left: 66, on right: 17
ifThen (72)
    on left: 67, on right: 18
whileExp (73)
    on left: 68, on right: 19
forExp (74)
    on left: 69, on right: 20
letExp (75)
    on left: 70, on right: 22


state 0

    0 $accept: . program $end

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    program     go to state 12
    exp         go to state 13
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 1

    8 exp: INTLIT .

    $default  reduce using rule 8 (exp)


state 2

    9 exp: STRLIT .

    $default  reduce using rule 9 (exp)


state 3

   21 exp: BREAK .

    $default  reduce using rule 21 (exp)


state 4

   69 forExp: FOR . ID ASSIGNMENT exp TO exp DO exp

    ID  shift, and go to state 27


state 5

   66 ifThenElse: IF . exp THEN exp ELSE exp
   67 ifThen: IF . exp THEN exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 28
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 6

   70 letExp: LET . decs IN exps END

    VAR       shift, and go to state 29
    FUNCTION  shift, and go to state 30
    TYPE      shift, and go to state 31

    decs    go to state 32
    dec     go to state 33
    tyDec   go to state 34
    funDec  go to state 35
    varDec  go to state 36


state 7

    7 exp: NIL .

    $default  reduce using rule 7 (exp)


state 8

   68 whileExp: WHILE . exp DO exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 37
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 9

   40 lValue: ID .
   43       | ID . LBRACK exp RBRACK
   46 callExp: ID . LPAREN exps RPAREN
   59 arrCreate: ID . LBRACK exp RBRACK OF exp
   60 recCreate: ID . LBRACE fieldCreates RBRACE

    LBRACE  shift, and go to state 38
    LBRACK  shift, and go to state 39
    LPAREN  shift, and go to state 40

    $default  reduce using rule 40 (lValue)


state 10

   44 seqExp: LPAREN . exps RPAREN

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    $default  reduce using rule 2 (exps)

    exps        go to state 41
    exp         go to state 42
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 11

   45 negation: SUBTRACT . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 43
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 12

    0 $accept: program . $end

    $end  shift, and go to state 44


state 13

    1 program: exp .
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 1 (program)


state 14

    6 exp: lValue .
   41 lValue: lValue . PERIOD ID
   42       | lValue . LBRACK exp RBRACK
   65 assignment: lValue . ASSIGNMENT exp

    PERIOD      shift, and go to state 57
    LBRACK      shift, and go to state 58
    ASSIGNMENT  shift, and go to state 59

    $default  reduce using rule 6 (exp)


state 15

   10 exp: seqExp .

    $default  reduce using rule 10 (exp)


state 16

   11 exp: negation .

    $default  reduce using rule 11 (exp)


state 17

   12 exp: callExp .

    $default  reduce using rule 12 (exp)


state 18

   13 exp: infixExp .

    $default  reduce using rule 13 (exp)


state 19

   14 exp: arrCreate .

    $default  reduce using rule 14 (exp)


state 20

   15 exp: recCreate .

    $default  reduce using rule 15 (exp)


state 21

   16 exp: assignment .

    $default  reduce using rule 16 (exp)


state 22

   17 exp: ifThenElse .

    $default  reduce using rule 17 (exp)


state 23

   18 exp: ifThen .

    $default  reduce using rule 18 (exp)


state 24

   19 exp: whileExp .

    $default  reduce using rule 19 (exp)


state 25

   20 exp: forExp .

    $default  reduce using rule 20 (exp)


state 26

   22 exp: letExp .

    $default  reduce using rule 22 (exp)


state 27

   69 forExp: FOR ID . ASSIGNMENT exp TO exp DO exp

    ASSIGNMENT  shift, and go to state 60


state 28

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   66 ifThenElse: IF exp . THEN exp ELSE exp
   67 ifThen: IF exp . THEN exp

    THEN         shift, and go to state 61
    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56


state 29

   39 varDec: VAR . ID COLON ID ASSIGNMENT exp

    ID  shift, and go to state 62


state 30

   38 funDec: FUNCTION . ID LPAREN fieldDecs RPAREN COLON ID EQUALS exp

    ID  shift, and go to state 63


state 31

   28 tyDec: TYPE . ID EQUALS ty

    ID  shift, and go to state 64


state 32

   24 decs: decs . dec
   70 letExp: LET decs . IN exps END

    IN        shift, and go to state 65
    VAR       shift, and go to state 29
    FUNCTION  shift, and go to state 30
    TYPE      shift, and go to state 31

    dec     go to state 66
    tyDec   go to state 34
    funDec  go to state 35
    varDec  go to state 36


state 33

   23 decs: dec .

    $default  reduce using rule 23 (decs)


state 34

   25 dec: tyDec .

    $default  reduce using rule 25 (dec)


state 35

   27 dec: funDec .

    $default  reduce using rule 27 (dec)


state 36

   26 dec: varDec .

    $default  reduce using rule 26 (dec)


state 37

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   68 whileExp: WHILE exp . DO exp

    DO           shift, and go to state 67
    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56


state 38

   60 recCreate: ID LBRACE . fieldCreates RBRACE

    $default  reduce using rule 61 (fieldCreates)

    fieldCreates  go to state 68


state 39

   43 lValue: ID LBRACK . exp RBRACK
   59 arrCreate: ID LBRACK . exp RBRACK OF exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 69
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 40

   46 callExp: ID LPAREN . exps RPAREN

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    $default  reduce using rule 2 (exps)

    exps        go to state 70
    exp         go to state 42
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 41

    4 exps: exps . SEMICOLON exp
    5     | exps . COMMA exp
   44 seqExp: LPAREN exps . RPAREN

    COMMA      shift, and go to state 71
    SEMICOLON  shift, and go to state 72
    RPAREN     shift, and go to state 73


state 42

    3 exps: exp .
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 3 (exps)


state 43

   45 negation: SUBTRACT exp .
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    $default  reduce using rule 45 (negation)


state 44

    0 $accept: program $end .

    $default  accept


state 45

   47 infixExp: exp AND . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 74
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 46

   48 infixExp: exp OR . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 75
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 47

   54 infixExp: exp LEQUAL . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 76
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 48

   53 infixExp: exp GEQUAL . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 77
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 49

   52 infixExp: exp LESS . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 78
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 50

   51 infixExp: exp GREATER . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 79
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 51

   50 infixExp: exp LESSGREATER . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 80
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 52

   49 infixExp: exp EQUALS . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 81
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 53

   55 infixExp: exp ADD . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 82
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 54

   56 infixExp: exp SUBTRACT . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 83
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 55

   57 infixExp: exp MULTIPLY . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 84
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 56

   58 infixExp: exp DIVIDE . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 85
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 57

   41 lValue: lValue PERIOD . ID

    ID  shift, and go to state 86


state 58

   42 lValue: lValue LBRACK . exp RBRACK

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 87
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 59

   65 assignment: lValue ASSIGNMENT . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 88
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 60

   69 forExp: FOR ID ASSIGNMENT . exp TO exp DO exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 89
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 61

   66 ifThenElse: IF exp THEN . exp ELSE exp
   67 ifThen: IF exp THEN . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 90
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 62

   39 varDec: VAR ID . COLON ID ASSIGNMENT exp

    COLON  shift, and go to state 91


state 63

   38 funDec: FUNCTION ID . LPAREN fieldDecs RPAREN COLON ID EQUALS exp

    LPAREN  shift, and go to state 92


state 64

   28 tyDec: TYPE ID . EQUALS ty

    EQUALS  shift, and go to state 93


state 65

   70 letExp: LET decs IN . exps END

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    $default  reduce using rule 2 (exps)

    exps        go to state 94
    exp         go to state 42
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 66

   24 decs: decs dec .

    $default  reduce using rule 24 (decs)


state 67

   68 whileExp: WHILE exp DO . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 95
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 68

   60 recCreate: ID LBRACE fieldCreates . RBRACE
   62 fieldCreates: fieldCreates . fieldCreate
   63             | fieldCreates . COMMA fieldCreate

    RBRACE  shift, and go to state 96
    COMMA   shift, and go to state 97
    ID      shift, and go to state 98

    fieldCreate  go to state 99


state 69

   43 lValue: ID LBRACK exp . RBRACK
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   59 arrCreate: ID LBRACK exp . RBRACK OF exp

    RBRACK       shift, and go to state 100
    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56


state 70

    4 exps: exps . SEMICOLON exp
    5     | exps . COMMA exp
   46 callExp: ID LPAREN exps . RPAREN

    COMMA      shift, and go to state 71
    SEMICOLON  shift, and go to state 72
    RPAREN     shift, and go to state 101


state 71

    5 exps: exps COMMA . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 102
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 72

    4 exps: exps SEMICOLON . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 103
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 73

   44 seqExp: LPAREN exps RPAREN .

    $default  reduce using rule 44 (seqExp)


state 74

   47 infixExp: exp . AND exp
   47         | exp AND exp .
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 47 (infixExp)


state 75

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   48         | exp OR exp .
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 48 (infixExp)


state 76

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   54         | exp LEQUAL exp .
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    ADD       shift, and go to state 53
    SUBTRACT  shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    DIVIDE    shift, and go to state 56

    LEQUAL       error (nonassociative)
    GEQUAL       error (nonassociative)
    LESS         error (nonassociative)
    GREATER      error (nonassociative)
    LESSGREATER  error (nonassociative)
    EQUALS       error (nonassociative)

    $default  reduce using rule 54 (infixExp)


state 77

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   53         | exp GEQUAL exp .
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    ADD       shift, and go to state 53
    SUBTRACT  shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    DIVIDE    shift, and go to state 56

    LEQUAL       error (nonassociative)
    GEQUAL       error (nonassociative)
    LESS         error (nonassociative)
    GREATER      error (nonassociative)
    LESSGREATER  error (nonassociative)
    EQUALS       error (nonassociative)

    $default  reduce using rule 53 (infixExp)


state 78

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   52         | exp LESS exp .
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    ADD       shift, and go to state 53
    SUBTRACT  shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    DIVIDE    shift, and go to state 56

    LEQUAL       error (nonassociative)
    GEQUAL       error (nonassociative)
    LESS         error (nonassociative)
    GREATER      error (nonassociative)
    LESSGREATER  error (nonassociative)
    EQUALS       error (nonassociative)

    $default  reduce using rule 52 (infixExp)


state 79

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   51         | exp GREATER exp .
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    ADD       shift, and go to state 53
    SUBTRACT  shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    DIVIDE    shift, and go to state 56

    LEQUAL       error (nonassociative)
    GEQUAL       error (nonassociative)
    LESS         error (nonassociative)
    GREATER      error (nonassociative)
    LESSGREATER  error (nonassociative)
    EQUALS       error (nonassociative)

    $default  reduce using rule 51 (infixExp)


state 80

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   50         | exp LESSGREATER exp .
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    ADD       shift, and go to state 53
    SUBTRACT  shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    DIVIDE    shift, and go to state 56

    LEQUAL       error (nonassociative)
    GEQUAL       error (nonassociative)
    LESS         error (nonassociative)
    GREATER      error (nonassociative)
    LESSGREATER  error (nonassociative)
    EQUALS       error (nonassociative)

    $default  reduce using rule 50 (infixExp)


state 81

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   49         | exp EQUALS exp .
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    ADD       shift, and go to state 53
    SUBTRACT  shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    DIVIDE    shift, and go to state 56

    LEQUAL       error (nonassociative)
    GEQUAL       error (nonassociative)
    LESS         error (nonassociative)
    GREATER      error (nonassociative)
    LESSGREATER  error (nonassociative)
    EQUALS       error (nonassociative)

    $default  reduce using rule 49 (infixExp)


state 82

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   55         | exp ADD exp .
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    MULTIPLY  shift, and go to state 55
    DIVIDE    shift, and go to state 56

    $default  reduce using rule 55 (infixExp)


state 83

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   56         | exp SUBTRACT exp .
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    MULTIPLY  shift, and go to state 55
    DIVIDE    shift, and go to state 56

    $default  reduce using rule 56 (infixExp)


state 84

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   57         | exp MULTIPLY exp .
   58         | exp . DIVIDE exp

    $default  reduce using rule 57 (infixExp)


state 85

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   58         | exp DIVIDE exp .

    $default  reduce using rule 58 (infixExp)


state 86

   41 lValue: lValue PERIOD ID .

    $default  reduce using rule 41 (lValue)


state 87

   42 lValue: lValue LBRACK exp . RBRACK
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    RBRACK       shift, and go to state 104
    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56


state 88

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   65 assignment: lValue ASSIGNMENT exp .

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 65 (assignment)


state 89

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   69 forExp: FOR ID ASSIGNMENT exp . TO exp DO exp

    TO           shift, and go to state 105
    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56


state 90

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   66 ifThenElse: IF exp THEN exp . ELSE exp
   67 ifThen: IF exp THEN exp .

    ELSE         shift, and go to state 106
    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 67 (ifThen)


state 91

   39 varDec: VAR ID COLON . ID ASSIGNMENT exp

    ID  shift, and go to state 107


state 92

   38 funDec: FUNCTION ID LPAREN . fieldDecs RPAREN COLON ID EQUALS exp

    $default  reduce using rule 34 (fieldDecs)

    fieldDecs  go to state 108


state 93

   28 tyDec: TYPE ID EQUALS . ty

    LBRACE  shift, and go to state 109
    ARRAY   shift, and go to state 110
    ID      shift, and go to state 111

    ty     go to state 112
    arrTy  go to state 113
    recTy  go to state 114


state 94

    4 exps: exps . SEMICOLON exp
    5     | exps . COMMA exp
   70 letExp: LET decs IN exps . END

    COMMA      shift, and go to state 71
    SEMICOLON  shift, and go to state 72
    END        shift, and go to state 115


state 95

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   68 whileExp: WHILE exp DO exp .

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 68 (whileExp)


state 96

   60 recCreate: ID LBRACE fieldCreates RBRACE .

    $default  reduce using rule 60 (recCreate)


state 97

   63 fieldCreates: fieldCreates COMMA . fieldCreate

    ID  shift, and go to state 98

    fieldCreate  go to state 116


state 98

   64 fieldCreate: ID . EQUALS exp

    EQUALS  shift, and go to state 117


state 99

   62 fieldCreates: fieldCreates fieldCreate .

    $default  reduce using rule 62 (fieldCreates)


state 100

   43 lValue: ID LBRACK exp RBRACK .
   59 arrCreate: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 118

    $default  reduce using rule 43 (lValue)


state 101

   46 callExp: ID LPAREN exps RPAREN .

    $default  reduce using rule 46 (callExp)


state 102

    5 exps: exps COMMA exp .
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 5 (exps)


state 103

    4 exps: exps SEMICOLON exp .
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 4 (exps)


state 104

   42 lValue: lValue LBRACK exp RBRACK .

    $default  reduce using rule 42 (lValue)


state 105

   69 forExp: FOR ID ASSIGNMENT exp TO . exp DO exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 119
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 106

   66 ifThenElse: IF exp THEN exp ELSE . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 120
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 107

   39 varDec: VAR ID COLON ID . ASSIGNMENT exp

    ASSIGNMENT  shift, and go to state 121


state 108

   35 fieldDecs: fieldDecs . fieldDec
   36          | fieldDecs . COMMA fieldDec
   38 funDec: FUNCTION ID LPAREN fieldDecs . RPAREN COLON ID EQUALS exp

    COMMA   shift, and go to state 122
    RPAREN  shift, and go to state 123
    ID      shift, and go to state 124

    fieldDec  go to state 125


state 109

   33 recTy: LBRACE . fieldDecs RBRACE

    $default  reduce using rule 34 (fieldDecs)

    fieldDecs  go to state 126


state 110

   32 arrTy: ARRAY . OF ID

    OF  shift, and go to state 127


state 111

   29 ty: ID .

    $default  reduce using rule 29 (ty)


state 112

   28 tyDec: TYPE ID EQUALS ty .

    $default  reduce using rule 28 (tyDec)


state 113

   30 ty: arrTy .

    $default  reduce using rule 30 (ty)


state 114

   31 ty: recTy .

    $default  reduce using rule 31 (ty)


state 115

   70 letExp: LET decs IN exps END .

    $default  reduce using rule 70 (letExp)


state 116

   63 fieldCreates: fieldCreates COMMA fieldCreate .

    $default  reduce using rule 63 (fieldCreates)


state 117

   64 fieldCreate: ID EQUALS . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 128
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 118

   59 arrCreate: ID LBRACK exp RBRACK OF . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 129
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 119

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   69 forExp: FOR ID ASSIGNMENT exp TO exp . DO exp

    DO           shift, and go to state 130
    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56


state 120

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   66 ifThenElse: IF exp THEN exp ELSE exp .

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 66 (ifThenElse)


state 121

   39 varDec: VAR ID COLON ID ASSIGNMENT . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 131
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 122

   36 fieldDecs: fieldDecs COMMA . fieldDec

    ID  shift, and go to state 124

    fieldDec  go to state 132


state 123

   38 funDec: FUNCTION ID LPAREN fieldDecs RPAREN . COLON ID EQUALS exp

    COLON  shift, and go to state 133


state 124

   37 fieldDec: ID . COLON ID

    COLON  shift, and go to state 134


state 125

   35 fieldDecs: fieldDecs fieldDec .

    $default  reduce using rule 35 (fieldDecs)


state 126

   33 recTy: LBRACE fieldDecs . RBRACE
   35 fieldDecs: fieldDecs . fieldDec
   36          | fieldDecs . COMMA fieldDec

    RBRACE  shift, and go to state 135
    COMMA   shift, and go to state 122
    ID      shift, and go to state 124

    fieldDec  go to state 125


state 127

   32 arrTy: ARRAY OF . ID

    ID  shift, and go to state 136


state 128

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   64 fieldCreate: ID EQUALS exp .

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 64 (fieldCreate)


state 129

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   59 arrCreate: ID LBRACK exp RBRACK OF exp .

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 59 (arrCreate)


state 130

   69 forExp: FOR ID ASSIGNMENT exp TO exp DO . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 137
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 131

   39 varDec: VAR ID COLON ID ASSIGNMENT exp .
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 39 (varDec)


state 132

   36 fieldDecs: fieldDecs COMMA fieldDec .

    $default  reduce using rule 36 (fieldDecs)


state 133

   38 funDec: FUNCTION ID LPAREN fieldDecs RPAREN COLON . ID EQUALS exp

    ID  shift, and go to state 138


state 134

   37 fieldDec: ID COLON . ID

    ID  shift, and go to state 139


state 135

   33 recTy: LBRACE fieldDecs RBRACE .

    $default  reduce using rule 33 (recTy)


state 136

   32 arrTy: ARRAY OF ID .

    $default  reduce using rule 32 (arrTy)


state 137

   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp
   69 forExp: FOR ID ASSIGNMENT exp TO exp DO exp .

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 69 (forExp)


state 138

   38 funDec: FUNCTION ID LPAREN fieldDecs RPAREN COLON ID . EQUALS exp

    EQUALS  shift, and go to state 140


state 139

   37 fieldDec: ID COLON ID .

    $default  reduce using rule 37 (fieldDec)


state 140

   38 funDec: FUNCTION ID LPAREN fieldDecs RPAREN COLON ID EQUALS . exp

    INTLIT    shift, and go to state 1
    STRLIT    shift, and go to state 2
    BREAK     shift, and go to state 3
    FOR       shift, and go to state 4
    IF        shift, and go to state 5
    LET       shift, and go to state 6
    NIL       shift, and go to state 7
    WHILE     shift, and go to state 8
    ID        shift, and go to state 9
    LPAREN    shift, and go to state 10
    SUBTRACT  shift, and go to state 11

    exp         go to state 141
    lValue      go to state 14
    seqExp      go to state 15
    negation    go to state 16
    callExp     go to state 17
    infixExp    go to state 18
    arrCreate   go to state 19
    recCreate   go to state 20
    assignment  go to state 21
    ifThenElse  go to state 22
    ifThen      go to state 23
    whileExp    go to state 24
    forExp      go to state 25
    letExp      go to state 26


state 141

   38 funDec: FUNCTION ID LPAREN fieldDecs RPAREN COLON ID EQUALS exp .
   47 infixExp: exp . AND exp
   48         | exp . OR exp
   49         | exp . EQUALS exp
   50         | exp . LESSGREATER exp
   51         | exp . GREATER exp
   52         | exp . LESS exp
   53         | exp . GEQUAL exp
   54         | exp . LEQUAL exp
   55         | exp . ADD exp
   56         | exp . SUBTRACT exp
   57         | exp . MULTIPLY exp
   58         | exp . DIVIDE exp

    AND          shift, and go to state 45
    OR           shift, and go to state 46
    LEQUAL       shift, and go to state 47
    GEQUAL       shift, and go to state 48
    LESS         shift, and go to state 49
    GREATER      shift, and go to state 50
    LESSGREATER  shift, and go to state 51
    EQUALS       shift, and go to state 52
    ADD          shift, and go to state 53
    SUBTRACT     shift, and go to state 54
    MULTIPLY     shift, and go to state 55
    DIVIDE       shift, and go to state 56

    $default  reduce using rule 38 (funDec)
